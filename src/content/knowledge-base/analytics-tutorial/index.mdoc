---
title: adding-analytics-tutorial
description: Complete guide to adding analytics to your AiWeb site. Track visitors, measure performance, and understand user behavior.
category: tutorials
order: 2
icon: ðŸ“Š
image: /images/kb/analytics.jpg
lastUpdated: 2024-10-27
featured: false
---

# Adding Analytics Tutorial

Learn how to add analytics to your AiWeb site to track visitors, measure performance, and make data-driven decisions.

## Analytics Options

### Popular Analytics Platforms

1. **Google Analytics 4** (Free, comprehensive)
2. **Plausible** (Privacy-friendly, paid)
3. **Fathom** (Simple, privacy-focused)
4. **Umami** (Self-hosted, open-source)
5. **Simple Analytics** (Privacy-first, paid)

## Google Analytics 4

### Step 1: Create GA4 Property

1. Go to [analytics.google.com](https://analytics.google.com)
2. Create account (or use existing)
3. Create property
4. Get Measurement ID (format: `G-XXXXXXXXXX`)

### Step 2: Add to AiWeb

Create analytics component:

```astro
---
// src/components/GoogleAnalytics.astro
const GA_MEASUREMENT_ID = import.meta.env.PUBLIC_GA_ID;
const isProd = import.meta.env.PROD;

// Only load in production
if (!isProd || !GA_MEASUREMENT_ID) {
  console.log('Analytics disabled in development');
}
---

{isProd && GA_MEASUREMENT_ID && (
  <>
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}></script>
    <script is:inline define:vars={{ GA_MEASUREMENT_ID }}>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', GA_MEASUREMENT_ID);
    </script>
  </>
)}
```

### Step 3: Add to Layout

```astro
---
// src/layouts/BaseLayout.astro
import GoogleAnalytics from '@/components/GoogleAnalytics.astro';
---

<html>
  <head>
    <!-- Other head content -->
    <GoogleAnalytics />
  </head>
  <body>
    <!-- Page content -->
  </body>
</html>
```

### Step 4: Configure Environment

Add to `.env`:

```bash
PUBLIC_GA_ID=G-XXXXXXXXXX
```

### Step 5: Track Events

Create event tracking utility:

```typescript
// src/utils/analytics.ts
export function trackEvent(
  eventName: string,
  eventParams?: Record<string, any>
) {
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', eventName, eventParams);
  }
}

// Usage examples
export const analytics = {
  trackPageView: (path: string) => {
    trackEvent('page_view', { page_path: path });
  },

  trackButtonClick: (buttonName: string) => {
    trackEvent('button_click', { button_name: buttonName });
  },

  trackFormSubmit: (formName: string) => {
    trackEvent('form_submit', { form_name: formName });
  },

  trackDownload: (fileName: string) => {
    trackEvent('file_download', { file_name: fileName });
  },
};
```

Usage in components:

```typescript
import { analytics } from '@/utils/analytics';

// Track button click
<button onClick={() => analytics.trackButtonClick('Get Started')}>
  Get Started
</button>

// Track form submission
const handleSubmit = (e) => {
  analytics.trackFormSubmit('Newsletter');
  // ... form logic
};
```

## Plausible Analytics

### Step 1: Sign Up

1. Go to [plausible.io](https://plausible.io)
2. Create account
3. Add your domain

### Step 2: Add Script

```astro
---
// src/components/PlausibleAnalytics.astro
const DOMAIN = import.meta.env.PUBLIC_SITE_DOMAIN;
const isProd = import.meta.env.PROD;
---

{isProd && DOMAIN && (
  <script
    defer
    data-domain={DOMAIN}
    src="https://plausible.io/js/script.js"
  ></script>
)}
```

### Step 3: Track Custom Events

```typescript
// src/utils/plausible.ts
export function trackPlausibleEvent(
  eventName: string,
  props?: Record<string, any>
) {
  if (typeof window !== 'undefined' && window.plausible) {
    window.plausible(eventName, { props });
  }
}
```

### Step 4: Use in Components

```typescript
<button
  onClick={() => trackPlausibleEvent('Signup', { plan: 'Pro' })}
>
  Sign Up
</button>
```

## Self-Hosted Umami

### Step 1: Deploy Umami

Deploy to Vercel, Railway, or self-host:

```bash
# Clone Umami
git clone https://github.com/umami-software/umami.git
cd umami

# Deploy following their guide
```

### Step 2: Add to AiWeb

```astro
---
// src/components/UmamiAnalytics.astro
const UMAMI_WEBSITE_ID = import.meta.env.PUBLIC_UMAMI_WEBSITE_ID;
const UMAMI_SRC = import.meta.env.PUBLIC_UMAMI_SRC;
const isProd = import.meta.env.PROD;
---

{isProd && UMAMI_WEBSITE_ID && UMAMI_SRC && (
  <script
    async
    defer
    data-website-id={UMAMI_WEBSITE_ID}
    src={UMAMI_SRC}
  ></script>
)}
```

## Privacy-Friendly Setup

### Cookie Consent

```typescript
// src/components/CookieConsent.tsx
import { useState, useEffect } from 'react';

export default function CookieConsent() {
  const [show, setShow] = useState(false);

  useEffect(() => {
    const consent = localStorage.getItem('cookie-consent');
    if (!consent) {
      setShow(true);
    }
  }, []);

  const acceptCookies = () => {
    localStorage.setItem('cookie-consent', 'accepted');
    setShow(false);
    // Initialize analytics here
    initializeAnalytics();
  };

  const declineCookies = () => {
    localStorage.setItem('cookie-consent', 'declined');
    setShow(false);
  };

  if (!show) return null;

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-base-200 p-4 shadow-2xl z-50">
      <div className="container-custom flex flex-col md:flex-row items-center justify-between gap-4">
        <p className="text-sm">
          We use cookies to improve your experience. By using our site, you consent to cookies.
        </p>
        <div className="flex gap-2">
          <button onClick={acceptCookies} className="btn btn-primary btn-sm">
            Accept
          </button>
          <button onClick={declineCookies} className="btn btn-ghost btn-sm">
            Decline
          </button>
        </div>
      </div>
    </div>
  );
}
```

### Conditional Analytics Loading

```typescript
// src/utils/analytics.ts
let analyticsInitialized = false;

export function initializeAnalytics() {
  if (analyticsInitialized) return;

  const consent = localStorage.getItem('cookie-consent');
  if (consent !== 'accepted') return;

  // Load analytics script
  const script = document.createElement('script');
  script.src = `https://www.googletagmanager.com/gtag/js?id=${GA_ID}`;
  script.async = true;
  document.head.appendChild(script);

  analyticsInitialized = true;
}
```

## Web Vitals Tracking

### Step 1: Install web-vitals

```bash
npm install web-vitals
```

### Step 2: Create Tracking Component

```typescript
// src/components/WebVitals.tsx
import { useEffect } from 'react';
import { onCLS, onFID, onLCP, onFCP, onTTFB } from 'web-vitals';

function sendToAnalytics(metric: any) {
  // Send to your analytics endpoint
  fetch('/api/analytics', {
    method: 'POST',
    body: JSON.stringify(metric),
    headers: {
      'Content-Type': 'application/json',
    },
    keepalive: true,
  });

  // Or send to Google Analytics
  if (window.gtag) {
    window.gtag('event', metric.name, {
      value: Math.round(metric.value),
      event_category: 'Web Vitals',
      event_label: metric.id,
      non_interaction: true,
    });
  }
}

export default function WebVitals() {
  useEffect(() => {
    onCLS(sendToAnalytics);
    onFID(sendToAnalytics);
    onLCP(sendToAnalytics);
    onFCP(sendToAnalytics);
    onTTFB(sendToAnalytics);
  }, []);

  return null;
}
```

### Step 3: Add to Layout

```astro
---
import WebVitals from '@/components/WebVitals';
---

<html>
  <body>
    <!-- Content -->
    <WebVitals client:load />
  </body>
</html>
```

## Custom Analytics Dashboard

### Create API Endpoint

```typescript
// src/pages/api/analytics.json.ts
import type { APIRoute } from 'astro';

export const POST: APIRoute = async ({ request }) => {
  const metric = await request.json();

  // Store in your database
  // await db.metrics.insert(metric);

  // Log to console in development
  if (import.meta.env.DEV) {
    console.log('Metric:', metric);
  }

  return new Response(JSON.stringify({ success: true }), {
    status: 200,
    headers: {
      'Content-Type': 'application/json',
    },
  });
};
```

## Advanced Tracking

### Track Scroll Depth

```typescript
// src/utils/scrollTracking.ts
let scrollDepth = 0;
const milestones = [25, 50, 75, 100];
const trackedMilestones = new Set<number>();

export function initScrollTracking() {
  window.addEventListener('scroll', () => {
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight;
    const scrollTop = window.scrollY;

    scrollDepth = ((scrollTop + windowHeight) / documentHeight) * 100;

    milestones.forEach((milestone) => {
      if (scrollDepth >= milestone && !trackedMilestones.has(milestone)) {
        trackedMilestones.add(milestone);
        trackEvent('scroll_depth', { depth: milestone });
      }
    });
  });
}
```

### Track Time on Page

```typescript
// src/utils/timeTracking.ts
let startTime: number;
let endTime: number;

export function initTimeTracking() {
  startTime = Date.now();

  window.addEventListener('beforeunload', () => {
    endTime = Date.now();
    const timeSpent = Math.round((endTime - startTime) / 1000);

    trackEvent('time_on_page', {
      seconds: timeSpent,
      page: window.location.pathname,
    });
  });
}
```

### Track Outbound Links

```typescript
// src/utils/linkTracking.ts
export function initLinkTracking() {
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const link = target.closest('a');

    if (link && link.hostname !== window.location.hostname) {
      trackEvent('outbound_link', {
        url: link.href,
        text: link.textContent,
      });
    }
  });
}
```

## Testing Analytics

### Development Mode

Create test mode:

```typescript
// src/utils/analytics.ts
const isDev = import.meta.env.DEV;

export function trackEvent(name: string, params?: any) {
  if (isDev) {
    console.log('Analytics Event:', name, params);
    return;
  }

  // Real tracking code
  window.gtag?.('event', name, params);
}
```

### Debug Mode

Enable GA4 debug mode:

```typescript
gtag('config', GA_MEASUREMENT_ID, {
  debug_mode: import.meta.env.DEV,
});
```

## GDPR Compliance

### Anonymize IP

```typescript
gtag('config', GA_MEASUREMENT_ID, {
  anonymize_ip: true,
});
```

### Opt-Out Function

```typescript
export function optOutAnalytics() {
  // Disable Google Analytics
  window[`ga-disable-${GA_MEASUREMENT_ID}`] = true;

  // Clear storage
  localStorage.setItem('analytics-opt-out', 'true');

  // Show confirmation
  alert('Analytics opt-out successful');
}
```

## Performance Impact

### Lazy Load Analytics

```astro
<script>
  // Load analytics after page is interactive
  window.addEventListener('load', () => {
    setTimeout(() => {
      const script = document.createElement('script');
      script.src = 'analytics.js';
      document.head.appendChild(script);
    }, 2000);
  });
</script>
```

### Use Partytown (Advanced)

```bash
npm install @astrojs/partytown
```

```javascript
// astro.config.mjs
import partytown from '@astrojs/partytown';

export default defineConfig({
  integrations: [
    partytown({
      config: {
        forward: ['dataLayer.push'],
      },
    }),
  ],
});
```

## Monitoring Checklist

- âœ… Analytics script loads in production only
- âœ… Cookie consent implemented
- âœ… IP anonymization enabled
- âœ… Custom events tracked
- âœ… Web Vitals monitored
- âœ… Privacy policy updated
- âœ… Opt-out mechanism provided
- âœ… Performance impact minimized

## Next Steps

- Set up conversion goals
- Create custom dashboards
- Configure alerts
- Implement A/B testing
- Track user journeys

## Resources

- [Google Analytics Documentation](https://developers.google.com/analytics)
- [Plausible Documentation](https://plausible.io/docs)
- [web-vitals Library](https://github.com/GoogleChrome/web-vitals)

Track your success! ðŸ“Š
