---
title: building-custom-components-tutorial
description: Step-by-step tutorial for building custom components in AiWeb. Create a fully functional feature from scratch.
category: tutorials
order: 1
icon: üõ†Ô∏è
image: /images/kb/custom-components.jpg
lastUpdated: 2024-10-27
featured: false
---

# Building Custom Components Tutorial

In this hands-on tutorial, you'll build a complete feature from scratch: a testimonials section with rotating quotes, social proof, and animations.

## What We're Building

A testimonials component with:
- Card layout with avatars
- Star ratings
- Rotating testimonials
- Smooth animations
- Responsive design
- Accessible markup

## Project Setup

Create the file structure:

```bash
mkdir -p src/components/testimonials
touch src/components/testimonials/TestimonialCard.astro
touch src/components/testimonials/TestimonialCarousel.tsx
touch src/components/testimonials/StarRating.astro
```

## Step 1: Star Rating Component

Create `src/components/testimonials/StarRating.astro`:

```astro
---
interface Props {
  rating: number;
  maxStars?: number;
}

const { rating, maxStars = 5 } = Astro.props;

const fullStars = Math.floor(rating);
const hasHalfStar = rating % 1 !== 0;
const emptyStars = maxStars - Math.ceil(rating);
---

<div class="flex gap-1" aria-label={`Rating: ${rating} out of ${maxStars} stars`}>
  {Array.from({ length: fullStars }).map(() => (
    <svg class="w-5 h-5 text-warning" fill="currentColor" viewBox="0 0 20 20">
      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
    </svg>
  ))}

  {hasHalfStar && (
    <svg class="w-5 h-5 text-warning" fill="currentColor" viewBox="0 0 20 20">
      <defs>
        <linearGradient id="half">
          <stop offset="50%" stop-color="currentColor"/>
          <stop offset="50%" stop-color="transparent"/>
        </linearGradient>
      </defs>
      <path fill="url(#half)" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
    </svg>
  )}

  {Array.from({ length: emptyStars }).map(() => (
    <svg class="w-5 h-5 text-base-300" fill="currentColor" viewBox="0 0 20 20">
      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
    </svg>
  ))}
</div>
```

## Step 2: Testimonial Card Component

Create `src/components/testimonials/TestimonialCard.astro`:

```astro
---
import StarRating from './StarRating.astro';

export interface Testimonial {
  id: number;
  name: string;
  role: string;
  company: string;
  avatar: string;
  content: string;
  rating: number;
}

interface Props {
  testimonial: Testimonial;
  featured?: boolean;
}

const { testimonial, featured = false } = Astro.props;
---

<div
  class={`card bg-base-100 shadow-xl ${featured ? 'border-2 border-primary' : ''}`}
  data-testimonial-id={testimonial.id}
>
  <div class="card-body">
    <!-- Quote Icon -->
    <div class="text-4xl text-primary opacity-50 mb-2">"</div>

    <!-- Content -->
    <p class="text-lg mb-4">{testimonial.content}</p>

    <!-- Rating -->
    <div class="mb-4">
      <StarRating rating={testimonial.rating} />
    </div>

    <!-- Author -->
    <div class="flex items-center gap-4">
      <div class="avatar">
        <div class="w-12 h-12 rounded-full">
          <img src={testimonial.avatar} alt={testimonial.name} />
        </div>
      </div>

      <div>
        <h4 class="font-bold">{testimonial.name}</h4>
        <p class="text-sm text-base-content/70">
          {testimonial.role} at {testimonial.company}
        </p>
      </div>
    </div>

    {featured && (
      <div class="badge badge-primary absolute top-4 right-4">Featured</div>
    )}
  </div>
</div>
```

## Step 3: Testimonial Carousel Component

Create `src/components/testimonials/TestimonialCarousel.tsx`:

```typescript
import { useState, useEffect } from 'react';
import type { Testimonial } from './TestimonialCard.astro';

interface Props {
  testimonials: Testimonial[];
  autoPlay?: boolean;
  interval?: number;
}

export default function TestimonialCarousel({
  testimonials,
  autoPlay = true,
  interval = 5000,
}: Props) {
  const [current, setCurrent] = useState(0);
  const [isPaused, setIsPaused] = useState(false);

  useEffect(() => {
    if (!autoPlay || isPaused) return;

    const timer = setInterval(() => {
      setCurrent((prev) => (prev + 1) % testimonials.length);
    }, interval);

    return () => clearInterval(timer);
  }, [autoPlay, interval, isPaused, testimonials.length]);

  const goToSlide = (index: number) => {
    setCurrent(index);
    setIsPaused(true);
    setTimeout(() => setIsPaused(false), interval);
  };

  const goToPrevious = () => {
    setCurrent((prev) => (prev - 1 + testimonials.length) % testimonials.length);
  };

  const goToNext = () => {
    setCurrent((prev) => (prev + 1) % testimonials.length);
  };

  return (
    <div className="relative">
      {/* Main Testimonial Display */}
      <div className="overflow-hidden">
        <div
          className="flex transition-transform duration-500 ease-in-out"
          style={{ transform: `translateX(-${current * 100}%)` }}
        >
          {testimonials.map((testimonial) => (
            <div key={testimonial.id} className="min-w-full px-4">
              <div className="card bg-base-100 shadow-2xl">
                <div className="card-body items-center text-center p-12">
                  {/* Avatar */}
                  <div className="avatar mb-6">
                    <div className="w-24 h-24 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2">
                      <img src={testimonial.avatar} alt={testimonial.name} />
                    </div>
                  </div>

                  {/* Quote */}
                  <p className="text-2xl mb-6 max-w-3xl leading-relaxed">
                    "{testimonial.content}"
                  </p>

                  {/* Rating */}
                  <div className="flex gap-1 mb-6">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <svg
                        key={i}
                        className={`w-6 h-6 ${
                          i < testimonial.rating ? 'text-warning' : 'text-base-300'
                        }`}
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    ))}
                  </div>

                  {/* Author */}
                  <h4 className="text-xl font-bold">{testimonial.name}</h4>
                  <p className="text-base-content/70">
                    {testimonial.role} at {testimonial.company}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Navigation Buttons */}
      <button
        onClick={goToPrevious}
        className="btn btn-circle btn-primary absolute left-4 top-1/2 -translate-y-1/2"
        aria-label="Previous testimonial"
      >
        ‚ùÆ
      </button>

      <button
        onClick={goToNext}
        className="btn btn-circle btn-primary absolute right-4 top-1/2 -translate-y-1/2"
        aria-label="Next testimonial"
      >
        ‚ùØ
      </button>

      {/* Dots Navigation */}
      <div className="flex justify-center gap-2 mt-8">
        {testimonials.map((_, index) => (
          <button
            key={index}
            onClick={() => goToSlide(index)}
            className={`w-3 h-3 rounded-full transition-all ${
              index === current ? 'bg-primary w-8' : 'bg-base-300'
            }`}
            aria-label={`Go to testimonial ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
}
```

## Step 4: Usage in Pages

Create a page to display testimonials:

```astro
---
// src/pages/testimonials.astro
import BaseLayout from '@/layouts/BaseLayout.astro';
import TestimonialCard from '@/components/testimonials/TestimonialCard.astro';
import TestimonialCarousel from '@/components/testimonials/TestimonialCarousel';

const testimonials = [
  {
    id: 1,
    name: 'Sarah Johnson',
    role: 'CEO',
    company: 'TechStart Inc',
    avatar: '/images/avatars/sarah.jpg',
    content: 'AiWeb transformed how we build our websites. The performance is outstanding!',
    rating: 5,
  },
  {
    id: 2,
    name: 'Michael Chen',
    role: 'Developer',
    company: 'WebDev Co',
    avatar: '/images/avatars/michael.jpg',
    content: 'Best static site generator I\'ve used. The DX is amazing and deployment is seamless.',
    rating: 5,
  },
  {
    id: 3,
    name: 'Emily Rodriguez',
    role: 'Designer',
    company: 'Creative Studio',
    avatar: '/images/avatars/emily.jpg',
    content: 'Love the theming system! I can create beautiful designs without touching CSS.',
    rating: 4.5,
  },
];
---

<BaseLayout title="Testimonials">
  <!-- Hero Section -->
  <section class="section-padding bg-gradient-to-br from-primary to-secondary text-primary-content">
    <div class="container-custom text-center">
      <h1 class="text-5xl font-bold mb-4">What Our Users Say</h1>
      <p class="text-xl opacity-90">
        Trusted by developers and designers worldwide
      </p>
    </div>
  </section>

  <!-- Carousel Section -->
  <section class="section-padding">
    <div class="container-custom max-w-5xl">
      <TestimonialCarousel
        testimonials={testimonials}
        autoPlay={true}
        interval={5000}
        client:visible
      />
    </div>
  </section>

  <!-- Grid Section -->
  <section class="section-padding bg-base-200">
    <div class="container-custom">
      <h2 class="text-4xl font-bold text-center mb-12">More Testimonials</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {testimonials.map((testimonial, index) => (
          <TestimonialCard
            testimonial={testimonial}
            featured={index === 0}
          />
        ))}
      </div>
    </div>
  </section>
</BaseLayout>
```

## Step 5: Add Animations

Enhance with animations using Tailwind:

```astro
<div class="card hover:scale-105 transition-transform duration-300">
  <!-- Card content -->
</div>
```

Add fade-in animation:

```css
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.testimonial-card {
  animation: fadeIn 0.5s ease-out;
}
```

## Step 6: Make It Accessible

Add ARIA labels and keyboard navigation:

```typescript
// In TestimonialCarousel.tsx
useEffect(() => {
  const handleKeyPress = (e: KeyboardEvent) => {
    if (e.key === 'ArrowLeft') goToPrevious();
    if (e.key === 'ArrowRight') goToNext();
  };

  window.addEventListener('keydown', handleKeyPress);
  return () => window.removeEventListener('keydown', handleKeyPress);
}, []);
```

Add ARIA live region:

```typescript
<div
  role="region"
  aria-label="Testimonials carousel"
  aria-live="polite"
>
  {/* Carousel content */}
</div>
```

## Step 7: Optimize Performance

Lazy load avatars:

```astro
<img
  src={testimonial.avatar}
  alt={testimonial.name}
  loading="lazy"
  width="96"
  height="96"
/>
```

Use `client:visible` for carousel:

```astro
<TestimonialCarousel
  testimonials={testimonials}
  client:visible
/>
```

## Complete Example

Your final structure:

```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ testimonials/
‚îÇ       ‚îú‚îÄ‚îÄ StarRating.astro
‚îÇ       ‚îú‚îÄ‚îÄ TestimonialCard.astro
‚îÇ       ‚îî‚îÄ‚îÄ TestimonialCarousel.tsx
‚îî‚îÄ‚îÄ pages/
    ‚îî‚îÄ‚îÄ testimonials.astro
```

## Testing

Create a demo page to test all variations:

```astro
---
// src/pages/demos/testimonials.astro
import TestimonialCard from '@/components/testimonials/TestimonialCard.astro';

const demoTestimonial = {
  id: 1,
  name: 'Test User',
  role: 'Tester',
  company: 'Test Co',
  avatar: '/images/test-avatar.jpg',
  content: 'This is a test testimonial.',
  rating: 4.5,
};
---

<div class="p-8 space-y-8">
  <section>
    <h2>Default Card</h2>
    <TestimonialCard testimonial={demoTestimonial} />
  </section>

  <section>
    <h2>Featured Card</h2>
    <TestimonialCard testimonial={demoTestimonial} featured />
  </section>
</div>
```

## What You Learned

- Creating multiple components that work together
- Building interactive carousels with React
- Managing state and effects
- Implementing animations
- Making components accessible
- Optimizing for performance
- Testing components

## Next Steps

Extend this feature:
- Add filtering by rating
- Implement video testimonials
- Create admin interface for managing testimonials
- Add social proof metrics
- Integrate with CMS

## Resources

- [Component Guide](/knowledge-base/component-creation-guide)
- [Performance Checklist](/knowledge-base/performance-checklist)
- [React Documentation](https://react.dev)

You've built a complete feature! üõ†Ô∏è
